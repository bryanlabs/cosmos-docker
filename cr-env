#!/usr/bin/env bash
# cr-env: Pull Cosmos chain .env files from chain-registry
# Usage: ./cr-env pull <chain-name>

set -e

if [ "$1" != "pull" ] || [ -z "$2" ]; then
  echo "Usage: $0 pull <chain-name>"
  exit 1
fi

CHAIN_NAME="$2"
CHAIN_JSON_URL=""
RAW_BASE="https://raw.githubusercontent.com/cosmos/chain-registry/master"

# Try mainnet first
CHAIN_JSON_URL="$RAW_BASE/$CHAIN_NAME/chain.json"
if ! curl -sf "$CHAIN_JSON_URL" > /tmp/chain.json; then
  # Try testnet
  CHAIN_JSON_URL="$RAW_BASE/testnets/$CHAIN_NAME/chain.json"
  if ! curl -sf "$CHAIN_JSON_URL" > /tmp/chain.json; then
    echo "Chain $CHAIN_NAME not found in chain-registry."
    exit 1
  fi
fi

# Extract fields using jq
CHAIN_ID=$(jq -r .chain_id /tmp/chain.json)
DAEMON_NAME=$(jq -r .daemon_name /tmp/chain.json)
DAEMON_HOME=$(jq -r .node_home /tmp/chain.json)
REPO=$(jq -r '.codebase.git_repo // .codebase.repository' /tmp/chain.json)
VERSION=$(jq -r .codebase.recommended_version /tmp/chain.json)
GENESIS_URL=$(jq -r '.codebase.genesis.genesis_url // .genesis.genesis_url' /tmp/chain.json)
SEEDS=$(jq -r '.peers.seeds | map("\(.id)@\(.address)") | join(",")' /tmp/chain.json)
PERSISTENT_PEERS=$(jq -r '.peers.persistent_peers | map("\(.id)@\(.address)") | join(",")' /tmp/chain.json)
# Prefer fixed_min_gas_price, then low_gas_price, then empty
MIN_GAS_PRICE=$(jq -r '
  (.fees.fee_tokens[] | select(.fixed_min_gas_price != null) | "\(.fixed_min_gas_price)\(.denom)") //
  (.fees.fee_tokens[] | select(.low_gas_price != null) | "\(.low_gas_price)\(.denom)") //
  ""
' /tmp/chain.json | head -n1)

# Safely extract optional state sync fields
STATESYNC_RPC_SERVERS=$(jq -r 'try (.codebase.state_sync.rpc_servers // .state_sync.rpc_servers // empty) | select(type=="array") | join(",")' /tmp/chain.json)
STATESYNC_TRUST_HEIGHT=$(jq -r 'try (.codebase.state_sync.trust_height // .state_sync.trust_height // empty)' /tmp/chain.json)
STATESYNC_TRUST_HASH=$(jq -r 'try (.codebase.state_sync.trust_hash // .state_sync.trust_hash // empty)' /tmp/chain.json)

# Write .env file using a generic template, all values from chain-registry
ENV_FILE="${CHAIN_ID}.env"
cat > "$ENV_FILE" <<EOF
# Cosmos Chain Configuration
# Chain: $CHAIN_ID (mainnet)
# Documentation: https://docs.${CHAIN_NAME}.zone/

# Core configuration
NETWORK=$CHAIN_ID
MONIKER=${MONIKER:-${CHAIN_NAME}-node}
USER=${USER:-$CHAIN_NAME}
DAEMON_NAME=$DAEMON_NAME
DAEMON_HOME=${DAEMON_HOME:-/$DAEMON_NAME}

# Node version and repository
NODE_VERSION=v$VERSION
NODE_REPO=$REPO

# Data directory
DATA_DIR=/mnt/data/blockchain/${NETWORK}

# Networking
P2P_PORT=26656
RPC_PORT=26657
REST_PORT=1317
GRPC_PORT=9090
GRPC_WEB_PORT=9091
PROMETHEUS_PORT=26660

# Network configuration
GENESIS_URL=$GENESIS_URL
SEEDS=$SEEDS
PERSISTENT_PEERS=$PERSISTENT_PEERS

# Snapshot configuration
# SNAPSHOT=

# State sync configuration
# State sync allows a node to quickly sync to the current state without downloading the entire blockchain
# 
# IMPORTANT: How to choose the right trust height and hash:
# - The trust height must be at least 2/3 of the unbonding period old (typically ~1000-2000 blocks)
# - For most chains, use a height that's at least 2000 blocks behind the current chain tip
# - You can find current height at: <RPC-STATUS-URL>
# - The trust hash must match the block hash at the specified height
# - Both RPC servers must be synced and serve the trust height block
# 
# To find a good height and hash:
# 1. Check current height: curl -s <RPC-STATUS-URL> | jq -r .result.sync_info.latest_block_height
# 2. Subtract 2000-3000 blocks for safety margin
# 3. Get the hash: curl -s <RPC-BLOCK-URL>?height=<TRUST_HEIGHT> | jq -r .result.block.header.app_hash
#
STATESYNC_ENABLE=true
STATESYNC_RPC_SERVERS=$STATESYNC_RPC_SERVERS
STATESYNC_TRUST_HEIGHT=$STATESYNC_TRUST_HEIGHT
STATESYNC_TRUST_HASH=$STATESYNC_TRUST_HASH
STATESYNC_TRUST_PERIOD=360h0m0s
STATESYNC_DISCOVERY_TIME=15s
STATESYNC_CHUNK_REQUEST_TIMEOUT=10s
STATESYNC_CHUNK_FETCHERS=4

# P2P settings
MAX_INBOUND_PEERS=40
MAX_OUTBOUND_PEERS=10
P2P_PEX=true
P2P_ADDR_BOOK_STRICT=false
P2P_FLUSH_THROTTLE_TIMEOUT=100ms
P2P_DIAL_TIMEOUT=3s
P2P_HANDSHAKE_TIMEOUT=20s
P2P_ALLOW_DUPLICATE_IP=true
PRIVATE_PEER_IDS=

# RPC settings
RPC_CORS_ALLOWED_ORIGINS=["*"]
RPC_MAX_OPEN_CONNECTIONS=2000
RPC_GRPC_MAX_OPEN_CONNECTIONS=2000

# Consensus settings
CONSENSUS_TIMEOUT_COMMIT=5s
CONSENSUS_CREATE_EMPTY_BLOCKS=true
CONSENSUS_TIMEOUT_PROPOSE=3s
CONSENSUS_TIMEOUT_PROPOSE_DELTA=500ms
CONSENSUS_TIMEOUT_PREVOTE=1s
CONSENSUS_TIMEOUT_PREVOTE_DELTA=500ms
CONSENSUS_TIMEOUT_PRECOMMIT=1s
CONSENSUS_TIMEOUT_PRECOMMIT_DELTA=500ms

# Mempool settings
MEMPOOL_SIZE=5000
MEMPOOL_CACHE_SIZE=10000
MEMPOOL_RECHECK=true
MEMPOOL_BROADCAST=true

# Monitoring
PROMETHEUS_ENABLED=true
PROMETHEUS_LISTEN_ADDR=:26660
PROMETHEUS_NAMESPACE=tendermint

# FastSync and TX Index
FASTSYNC_VERSION=v0
TX_INDEX_INDEXER=kv

# Logging
LOG_LEVEL=info
NODE_LOG_FORMAT=plain

# External address (set to auto for automatic detection or specify manually)
EXTERNAL_ADDRESS=auto

# Minimum gas price configuration
MIN_GAS_PRICE=$MIN_GAS_PRICE

# Pruning configuration
PRUNING_STRATEGY=custom
PRUNING_KEEP_RECENT=362880
PRUNING_INTERVAL=100

# Extra flags for the daemon (optional)
EXTRA_FLAGS=

# Docker compose settings
COMPOSE_FILE=cosmos.yml
EOF

echo "Created $ENV_FILE with all values from chain-registry."
