#!/usr/bin/env bash
# cr-env: Pull Cosmos chain .env files from chain-registry
# Usage: ./cr-env pull <chain-name>

set -e

if [ "$1" != "pull" ] || [ -z "$2" ]; then
  echo "Usage: $0 pull <chain-name>"
  exit 1
fi

CHAIN_NAME="$2"
CHAIN_JSON_URL=""
RAW_BASE="https://raw.githubusercontent.com/cosmos/chain-registry/master"

# Try mainnet first
CHAIN_JSON_URL="$RAW_BASE/$CHAIN_NAME/chain.json"
if ! curl -sf "$CHAIN_JSON_URL" > /tmp/chain.json; then
  # Try testnet
  CHAIN_JSON_URL="$RAW_BASE/testnets/$CHAIN_NAME/chain.json"
  if ! curl -sf "$CHAIN_JSON_URL" > /tmp/chain.json; then
    echo "Chain $CHAIN_NAME not found in chain-registry."
    exit 1
  fi
fi

# Extract fields using jq
CHAIN_ID=$(jq -r .chain_id /tmp/chain.json)
DAEMON_NAME=$(jq -r .daemon_name /tmp/chain.json)
DAEMON_HOME=$(jq -r .node_home /tmp/chain.json)
REPO=$(jq -r '.codebase.git_repo // .codebase.repository' /tmp/chain.json)
RAW_VERSION=$(jq -r .codebase.recommended_version /tmp/chain.json)
# Clean up version tag - remove duplicate 'v' prefixes and ensure single 'v' prefix
VERSION=$(echo "$RAW_VERSION" | sed 's/^v*//; s/^/v/')
GENESIS_URL=$(jq -r '.codebase.genesis.genesis_url // .genesis.genesis_url' /tmp/chain.json)
SEEDS=$(jq -r '.peers.seeds | map("\(.id)@\(.address)") | join(",")' /tmp/chain.json)
PERSISTENT_PEERS=$(jq -r '.peers.persistent_peers | map("\(.id)@\(.address)") | join(",")' /tmp/chain.json)
# Prefer fixed_min_gas_price, then low_gas_price, then empty
MIN_GAS_PRICE=$(jq -r '
  (.fees.fee_tokens[] | select(.fixed_min_gas_price != null) | "\(.fixed_min_gas_price)\(.denom)") //
  (.fees.fee_tokens[] | select(.low_gas_price != null) | "\(.low_gas_price)\(.denom)") //
  ""
' /tmp/chain.json | head -n1)

# Safely extract optional state sync fields
STATESYNC_RPC_SERVERS=$(jq -r 'try (.codebase.state_sync.rpc_servers // .state_sync.rpc_servers // empty) | select(type=="array") | join(",")' /tmp/chain.json)
STATESYNC_TRUST_HEIGHT=$(jq -r 'try (.codebase.state_sync.trust_height // .state_sync.trust_height // empty)' /tmp/chain.json)
STATESYNC_TRUST_HASH=$(jq -r 'try (.codebase.state_sync.trust_hash // .state_sync.trust_hash // empty)' /tmp/chain.json)

# Try to get snapshot URL from Polkachu API
SNAPSHOT_URL=""
# Determine Polkachu chain name from the argument
if [[ "$CHAIN_NAME" == testnets/* ]]; then
  # Handle testnet format: testnets/noble -> noble/testnet
  TESTNET_CHAIN=$(echo "$CHAIN_NAME" | sed 's|testnets/||')
  POLKACHU_CHAIN="$TESTNET_CHAIN/testnet"
else
  # Handle mainnet format: osmosis -> osmosis/mainnet
  POLKACHU_CHAIN="$CHAIN_NAME/mainnet"
fi

if [ -n "$POLKACHU_CHAIN" ]; then
  echo "Checking for snapshot from Polkachu API for $POLKACHU_CHAIN..."
  SNAPSHOT_URL=$(curl -s -H "x-polkachu: cosmos-docker" "https://polkachu.com/api/v2/chain_snapshots/$POLKACHU_CHAIN" 2>/dev/null | jq -r '.snapshot.url // empty' 2>/dev/null || echo "")
  if [ -n "$SNAPSHOT_URL" ] && [ "$SNAPSHOT_URL" != "null" ]; then
    echo "Found snapshot: $SNAPSHOT_URL"
  else
    echo "No snapshot found from Polkachu API"
    SNAPSHOT_URL=""
  fi
fi

# Write chain-specific .env file with only overrides (common settings are in defaults.env)
ENV_FILE="${CHAIN_ID}.env"
cat > "$ENV_FILE" <<EOF
# $CHAIN_ID ($CHAIN_NAME) Specific Configuration
# Chain-specific overrides for $CHAIN_ID
# Common settings are inherited from defaults.env

# === CHAIN-SPECIFIC CONFIGURATION ===

# Core Configuration
NETWORK=$CHAIN_ID
MONIKER=${CHAIN_NAME}-node
USER=ubuntu
DAEMON_NAME=$DAEMON_NAME
DAEMON_HOME=$DAEMON_HOME

# Node Version and Build
NODE_VERSION=$VERSION
NODE_REPO=$REPO

# Network Configuration
GENESIS_URL=$GENESIS_URL
SEEDS=$SEEDS
PERSISTENT_PEERS=
EOF

# Only add minimum gas price if it exists and is not empty
if [ -n "$MIN_GAS_PRICE" ] && [ "$MIN_GAS_PRICE" != "null" ] && [ "$MIN_GAS_PRICE" != "" ]; then
cat >> "$ENV_FILE" <<EOF

# Snapshot Configuration
SNAPSHOT=$SNAPSHOT_URL

# Public API Configuration
PUBLIC_API_URL=

# Gas Price Override
MIN_GAS_PRICE=$MIN_GAS_PRICE
EOF
else
cat >> "$ENV_FILE" <<EOF

# Snapshot Configuration
SNAPSHOT=$SNAPSHOT_URL

# Public API Configuration
PUBLIC_API_URL=
EOF
fi

# Add standard footer for chain-specific configs
cat >> "$ENV_FILE" <<EOF

# Logging
LOG_LEVEL=info
NODE_LOG_FORMAT=plain

# External address (set to auto for automatic detection or specify manually)
EXTERNAL_ADDRESS=auto

# Minimum gas price configuration
MIN_GAS_PRICE=$MIN_GAS_PRICE

# Pruning configuration
PRUNING_STRATEGY=custom
PRUNING_KEEP_RECENT=362880
PRUNING_INTERVAL=100

# Extra flags for the daemon (optional)
EXTRA_FLAGS=

# Docker compose settings
COMPOSE_FILE=cosmos.yml
EOF

echo "Created $ENV_FILE with all values from chain-registry."
